--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -66,15 +66,16 @@
 # 2013-10-08 PH got rid of the "source" command, which is a bash-ism (use ".")
 # 2013-11-05 PH added support for PARENS_NEST_LIMIT
 # 2016-03-01 PH applied Chris Wilson's patch for MSVC static build
-
-PROJECT(PCRE C CXX)
+# 2016-06-18 Use exported targets and provide CMake configuration files
 
 # Increased minimum to 2.8.0 to support newer add_test features. Set policy
 # CMP0026 to avoid warnings for the use of LOCATION in GET_TARGET_PROPERTY.
 
-CMAKE_MINIMUM_REQUIRED(VERSION 2.8.0)
+CMAKE_MINIMUM_REQUIRED(VERSION 3.1.3)
 CMAKE_POLICY(SET CMP0026 OLD)
 
+PROJECT(PCRE VERSION 8.39 LANGUAGES C CXX)
+
 SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake) # for FindReadline.cmake
 
 # external packages
@@ -127,6 +128,9 @@ OPTION(PCRE_BUILD_PCRE32 "Build 32 bit P
 
 OPTION(PCRE_BUILD_PCRECPP "Build the PCRE C++ library (pcrecpp)." ON)
 
+SET(PCRE_ENABLE_DOC OFF CACHE BOOL
+    "Install documentation.")
+
 SET(PCRE_EBCDIC OFF CACHE BOOL
     "Use EBCDIC coding instead of ASCII. (This is rarely used outside of mainframe systems.)")
 
@@ -614,6 +618,20 @@ ENDIF(WIN32)
 
 SET(targets)
 
+# NOTE Append version suffix to all library targets, so this build may coexists w/ a system-wide
+IF(UNIX)
+    IF(NOT CMAKE_BUILD_TYPE)
+        SET(CMAKE_BUILD_TYPE "Debug")
+    ENDIF()
+
+    STRING(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UPCASE)
+    SET(CMAKE_${CMAKE_BUILD_TYPE_UPCASE}_POSTFIX "${CMAKE_${CMAKE_BUILD_TYPE_UPCASE}_POSTFIX}-${PCRE_MAJOR}.${PCRE_MINOR}")
+ENDIF(UNIX)
+
+# NOTE @OnixS: All libraries (even static) would have PIC
+# TODO It is not quite good...
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
 # Libraries
 # pcre
 IF(PCRE_BUILD_PCRE8)
@@ -881,19 +899,42 @@ ENDIF(PCRE_BUILD_TESTS)
 # Installation
 SET(CMAKE_INSTALL_ALWAYS 1)
 
-INSTALL(TARGETS ${targets}
-        RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
-
-INSTALL(FILES ${PCRE_HEADERS} ${PCREPOSIX_HEADERS} DESTINATION include)
-
-FILE(GLOB html ${PROJECT_SOURCE_DIR}/doc/html/*.html)
-FILE(GLOB man1 ${PROJECT_SOURCE_DIR}/doc/*.1)
-FILE(GLOB man3 ${PROJECT_SOURCE_DIR}/doc/*.3)
+INCLUDE(GNUInstallDirs)
+# Fix some paths to allow this package to be multislotted (in terms of Gentoo)
+SET(
+    PCRE_VERSIONED_PATH_SUFFIX
+    "pcre-${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}"
+  )
+SET(CMAKE_INSTALL_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR}/${PCRE_VERSIONED_PATH_SUFFIX}")
+SET(CMAKE_INSTALL_CMAKE_MODULESDIR "${CMAKE_INSTALL_LIBDIR}/${PCRE_VERSIONED_PATH_SUFFIX}/cmake")
+
+FOREACH(target ${targets})
+    INSTALL(
+        TARGETS ${target}
+        EXPORT ${target}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+      )
+    INSTALL(
+        EXPORT ${target}
+        DESTINATION ${CMAKE_INSTALL_CMAKE_MODULESDIR}
+        NAMESPACE PCRE::
+        EXPORT_LINK_INTERFACE_LIBRARIES
+      )
+ENDFOREACH()
+
+INSTALL(FILES ${PCRE_HEADERS} ${PCREPOSIX_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+
+IF(PCRE_ENABLE_DOC)
+    FILE(GLOB html ${PROJECT_SOURCE_DIR}/doc/html/*.html)
+    FILE(GLOB man1 ${PROJECT_SOURCE_DIR}/doc/*.1)
+    FILE(GLOB man3 ${PROJECT_SOURCE_DIR}/doc/*.3)
+ENDIF(PCRE_ENABLE_DOC)
 
 IF(PCRE_BUILD_PCRECPP)
-        INSTALL(FILES ${PCRECPP_HEADERS} DESTINATION include)
+        INSTALL(FILES ${PCRECPP_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
 ELSE(PCRE_BUILD_PCRECPP)
         # Remove pcrecpp.3
         FOREACH(man ${man3})
@@ -905,18 +946,20 @@ ELSE(PCRE_BUILD_PCRECPP)
         SET(man3 ${man3_new})
 ENDIF(PCRE_BUILD_PCRECPP)
 
-INSTALL(FILES ${man1} DESTINATION man/man1)
-INSTALL(FILES ${man3} DESTINATION man/man3)
-INSTALL(FILES ${html} DESTINATION share/doc/pcre/html)
+IF(PCRE_ENABLE_DOC)
+    INSTALL(FILES ${man1} DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
+    INSTALL(FILES ${man3} DESTINATION ${CMAKE_INSTALL_MANDIR}/man3)
+    INSTALL(FILES ${html} DESTINATION ${CMAKE_INSTALL_DOCDIR}/html)
+ENDIF(PCRE_ENABLE_DOC)
 
 IF(MSVC AND INSTALL_MSVC_PDB)
     INSTALL(FILES ${PROJECT_BINARY_DIR}/pcre.pdb
                   ${PROJECT_BINARY_DIR}/pcreposix.pdb
-            DESTINATION bin
+            DESTINATION ${CMAKE_INSTALL_BINDIR}
             CONFIGURATIONS RelWithDebInfo)
     INSTALL(FILES ${PROJECT_BINARY_DIR}/pcred.pdb
                   ${PROJECT_BINARY_DIR}/pcreposixd.pdb
-            DESTINATION bin
+            DESTINATION ${CMAKE_INSTALL_BINDIR}
             CONFIGURATIONS Debug)
 ENDIF(MSVC AND INSTALL_MSVC_PDB)
 
@@ -927,6 +970,28 @@ ELSE(BUILD_SHARED_LIBS)
   SET(BUILD_STATIC_LIBS ON)
 ENDIF(BUILD_SHARED_LIBS)
 
+INCLUDE(CMakePackageConfigHelpers)
+CONFIGURE_PACKAGE_CONFIG_FILE(
+    pcre-config.cmake.in
+    ${PROJECT_BINARY_DIR}/pcre-config.cmake
+    INSTALL_DESTINATION "${CMAKE_INSTALL_CMAKE_MODULESDIR}"
+    PATH_VARS
+        CMAKE_INSTALL_PREFIX
+        CMAKE_INSTALL_INCLUDEDIR
+        CMAKE_INSTALL_LIBDIR
+        CMAKE_INSTALL_CMAKE_MODULESDIR
+  )
+WRITE_BASIC_PACKAGE_VERSION_FILE(
+    ${PROJECT_BINARY_DIR}/pcre-config-version.cmake
+    COMPATIBILITY SameMajorVersion
+  )
+INSTALL(
+    FILES
+        ${PROJECT_BINARY_DIR}/pcre-config.cmake
+        ${PROJECT_BINARY_DIR}/pcre-config-version.cmake
+    DESTINATION ${CMAKE_INSTALL_CMAKE_MODULESDIR}
+  )
+
 IF(PCRE_SHOW_REPORT)
   STRING(TOUPPER "${CMAKE_BUILD_TYPE}" buildtype)
   IF (CMAKE_C_FLAGS)
--- /dev/null
+++ b/pcre-config.cmake.in
@@ -0,0 +1,67 @@
+# - Find PCRE Libraries package
+
+@PACKAGE_INIT@
+
+# Set and check some paths
+if(NOT PCRE_INSTALL_PREFIX)
+    set_and_check(PCRE_INSTALL_PREFIX "@PACKAGE_CMAKE_INSTALL_PREFIX@")
+endif()
+if(NOT PCRE_INCLUDE_DIR)
+    set_and_check(PCRE_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
+endif()
+if(NOT PCRE_LIBRARIES_DIR)
+    set_and_check(PCRE_LIBRARIES_DIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
+endif()
+if(NOT PCRE_CMAKE_MODULESDIR)
+    set_and_check(PCRE_CMAKE_MODULESDIR "@PACKAGE_CMAKE_INSTALL_CMAKE_MODULESDIR@")
+endif()
+
+# Setup some version strings as recommended by CMake guidelines
+set(PCRE_VERSION "@PROJECT_VERSION@")
+set(PCRE_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
+set(PCRE_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
+
+# Find components if requested
+set(_PCRE_NOTFOUND_MESSAGE)
+set(_PCRE_FOUND_COMPONENTS)
+foreach(module ${pcre_FIND_COMPONENTS})
+    # TODO Make sure component is supported
+    include(
+        "${PCRE_CMAKE_MODULESDIR}/${module}.cmake"
+        OPTIONAL
+        RESULT_VARIABLE PCRE_${module}_FOUND
+      )
+    if(NOT PCRE_${module}_FOUND)
+        if (pcre_FIND_REQUIRED_${module})
+            if(NOT _PCRE_NOTFOUND_MESSAGE)
+                set(_PCRE_NOTFOUND_MESSAGE "Failed to find the following requested PCRE component(s):")
+            endif()
+            set(_PCRE_NOTFOUND_MESSAGE "${_PCRE_NOTFOUND_MESSAGE}\n  ${module}")
+        elseif(NOT pcre_FIND_QUIETLY)
+            message(WARNING "Failed to find PCRE component: ${module}")
+        endif()
+    else()
+        list(APPEND _PCRE_FOUND_COMPONENTS ${module})
+    endif()
+endforeach()
+
+if(NOT PCRE_FIND_QUIETLY)
+    message(STATUS "Found PCRE: ${PCRE_VERSION}")
+    foreach(module ${_PCRE_FOUND_COMPONENTS})
+        message(STATUS "  ${module}")
+    endforeach()
+endif()
+
+if(_PCRE_NOTFOUND_MESSAGE)
+    set(pcre_NOT_FOUND_MESSAGE "${_PCRE_NOTFOUND_MESSAGE}")
+    set(pcre_FOUND NOTFOUND)
+    set(PCRE_FOUND NOTFOUND)
+else()
+    set(pcre_FOUND TRUE)
+    set(PCRE_FOUND TRUE)
+endif()
+
+unset(_PCRE_NOTFOUND_MESSAGE)
+unset(_PCRE_FOUND_COMPONENTS)
+
+# kate: hl CMake;
